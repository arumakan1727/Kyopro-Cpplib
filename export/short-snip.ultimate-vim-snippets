snippet bye "short-snip/bye.cpp"
const auto bye = [](const auto& x) { std::cout << x << '\n', std::exit(0); };

snippet div-ceil "short-snip/div-ceil.cpp"
const auto divceil = [](int64_t a, int64_t b) { return (a + b - 1) / b; };

snippet io-setup "short-snip/io-setup.cpp"
std::cin.tie(nullptr);
std::ios_base::sync_with_stdio(false);

snippet possible "short-snip/possible.cpp"
[[maybe_unused]] const auto possible = [](bool cond) { std::cout << (cond ? "possible" : "impossible") << '\n'; };
[[maybe_unused]] const auto Possible = [](bool cond) { std::cout << (cond ? "Possible" : "Impossible") << '\n'; };
[[maybe_unused]] const auto POSSIBLE = [](bool cond) { std::cout << (cond ? "POSSIBLE" : "IMPOSSIBLE") << '\n'; };

snippet precision "short-snip/precision.cpp"
${1:std::cout} << std::fixed << std::setprecision(12);
$0

snippet sigma "short-snip/sigma.cpp"
//! sum of [s, t]
const auto sigma = [](const auto s_, const auto t_) { return (s_ + t_) * (t_ - s_ + 1) / 2; };

snippet sqr "short-snip/sqr.cpp"
const auto sqr = [](const auto x_) { return x_ * x_; };

snippet uniq "short-snip/uniq.cpp"
${1}.erase(std::unique(begin($1), end($1)), end($1));
$0

snippet yay "short-snip/yay.cpp"
[[maybe_unused]] const auto yay = [](bool cond) { std::cout << (cond ? "yay!" : ":(") << '\n'; };
[[maybe_unused]] const auto Yay = [](bool cond) { std::cout << (cond ? "Yay!" : ":(") << '\n'; };

snippet yesno "short-snip/yesno.cpp"
[[maybe_unused]] const auto yesno = [](bool cond) { std::cout << (cond ? "yes" : "no") << '\n'; };
[[maybe_unused]] const auto YesNo = [](bool cond) { std::cout << (cond ? "Yes" : "No") << '\n'; };
[[maybe_unused]] const auto YESNO = [](bool cond) { std::cout << (cond ? "YES" : "NO") << '\n'; };

